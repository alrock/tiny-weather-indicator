#!/usr/bin/env python
#
# Copyright (c) 2012, Alexandr Krivoschekov
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
import urllib2
import syslog
import argparse
import datetime
#import gettext
import xml.parsers.expat

from xml.dom import minidom
from gi.repository import Gtk, GObject
from gi.repository import AppIndicator3 as appindicator

#gettext.install('', './locale', unicode=True)
_ = lambda x: x

code2store = {
  0: 'weather-storm',              # tornado
  1: 'weather-storm',              # tropical storm
  2: 'weather-storm',              # hurricane
  3: 'weather-storm',              # severe thunderstorms
  4: 'weather-storm',              # thunderstorms
  5: 'weather-snow',               # mixed rain and snow
  6: 'weather-snow',               # mixed rain and sleet
  7: 'weather-snow',               # mixed snow and sleet
  8: 'weather-showers-scattered',  # freezing drizzle
  9: 'weather-showers-scattered',  # drizzle
  10: 'weather-showers',           # freezing rain
  11: 'weather-showers',           # showers
  12: 'weather-showers',           # showers
  13: 'weather-snow',              # snow flurries
  14: 'weather-snow',              # light snow showers
  15: 'weather-snow',              # blowing snow
  16: 'weather-snow',              # snow
  17: 'weather-showers',           # hail
  18: 'weather-snow',              # sleet
  19: 'weather-fog',               # sic! #  dust
  20: 'weather-fog',               # foggy
  21: 'weather-fog',               # haze
  22: 'weather-fog',               # smoky
  23: 'weather-few-clouds',        # blustery
  24: 'weather-few-clouds',        # windy
  25: 'weather-clear',             # cold
  26: 'weather-overcast',          # cloudy
  27: 'weather-clouds-night',      # mostly cloudy (night)
  28: 'weather-clouds',            # mostly cloudy (day)
  29: 'weather-few-clouds-night',  # partly cloudy (night)
  30: 'weather-few-clouds',        # partly cloudy (day)
  31: 'weather-clear-night',       # clear (night)
  32: 'weather-clear',             # sunny
  33: 'weather-clear-night',       # fair (night)
  34: 'weather-clear',             # fair (day)
  35: 'weather-showers',           # mixed rain and hail
  36: 'weather-clear',             # hot
  37: 'weather-storm',             # isolated thunderstorms
  38: 'weather-storm',             # scattered thunderstorms
  39: 'weather-storm',             # scattered thunderstorms
  40: 'weather-showers-scattered', # scattered showers
  41: 'weather-snow',              # heavy snow
  42: 'weather-snow',              # scattered snow showers
  43: 'weather-snow',              # heavy snow
  44: 'weather-clouds',            # partly cloudy
  45: 'weather-storm',             # thundershowers
  46: 'weather-snow',              # snow showers
  47: 'weather-storm',             # isolated thundershowers
  3200: 'weather-severe-alert'     # not available
}

WEATHER_URL = 'http://xml.weather.yahoo.com/forecastrss?w={0!s}&u={1}'
WEATHER_NS = 'http://xml.weather.yahoo.com/ns/rss/1.0'

FAIL_LIMIT = 3

def weather_for_woeid(woeid, format = 'c'):
  url = WEATHER_URL.format(woeid, format)
  dom = minidom.parse(urllib2.urlopen(url))
  forecasts = []
  for node in dom.getElementsByTagNameNS(WEATHER_NS, 'forecast'):
      forecasts.append({
          'date': node.getAttribute('date'),
          'low': node.getAttribute('low'),
          'high': node.getAttribute('high'),
          'condition': node.getAttribute('text'),
          'code': node.getAttribute('code')
      })
  ylocation = dom.getElementsByTagNameNS(WEATHER_NS, 'location')[0]
  yunits = dom.getElementsByTagNameNS(WEATHER_NS, 'units')[0]
  ywind = dom.getElementsByTagNameNS(WEATHER_NS, 'wind')[0]
  yatmosphere = dom.getElementsByTagNameNS(WEATHER_NS, 'atmosphere')[0]
  yastronomy = dom.getElementsByTagNameNS(WEATHER_NS, 'astronomy')[0]
  ycondition = dom.getElementsByTagNameNS(WEATHER_NS, 'condition')[0]
  units = {}
  units['temperature'] = yunits.getAttribute('temperature')
  if units['temperature'].upper() == 'C':
    units['temperature'] = u'\u2103'
  else:
    units['temperature'] = u'\u2109'
  units['distance'] = yunits.getAttribute('distance')
  units['pressure'] = yunits.getAttribute('pressure')
  units['speed'] = yunits.getAttribute('speed')
  return {
      'city': ylocation.getAttribute('city'),
      'current_condition': ycondition.getAttribute('text'),
      'code': ycondition.getAttribute('code'),
      'current_temp': ycondition.getAttribute('temp'),
      'humidity': yatmosphere.getAttribute('humidity'),
      'visibility': yatmosphere.getAttribute('visibility'),
      'pressure': yatmosphere.getAttribute('pressure'),
      'forecasts': forecasts,
      'title': dom.getElementsByTagName('title')[0].firstChild.data,
      'units': units
  }

class WeatherIndicator:

  def __init__(self, woeid, format, period):
    self.ind = appindicator.Indicator.new ("ubuntu-weather-indicator",
                                    code2store[3200],
                                    appindicator.IndicatorCategory.APPLICATION_STATUS)
    self.ind.set_status(appindicator.IndicatorStatus.ACTIVE)
    self.ind.set_label('n/a', 'Current conditions is not available')
    self.ind.set_attention_icon(code2store[3200])

    self.data = None
    self.fails = 0                  # number of fails since last update
    self.last_update = _('Never')   # the date and time of last update
    self.woeid = woeid
    self.format = format
    self.period = period * 1000

    self.menu_setup()

  def menu_setup(self):
    self.menu = Gtk.Menu()

    if not self.data is None:
      title_item = Gtk.MenuItem(_('Weather for {}').format(self.data['city']))
      title_item.show()
      self.menu.append(title_item)

      humidity_item = Gtk.MenuItem(_('Humidity: {}%').format(self.data['humidity']))
      humidity_item.show()
      self.menu.append(humidity_item)

      temperature_item = Gtk.MenuItem(_(u'Temperature: {0}{1}').format(self.data['current_temp'], 
        self.data['units']['temperature']))
      temperature_item.show()
      self.menu.append(temperature_item)

      visibility_item = Gtk.MenuItem(_('Visibility: {0} {1}').format(self.data['visibility'], 
        self.data['units']['distance']))
      visibility_item.show()
      self.menu.append(visibility_item)

      pressure_item = Gtk.MenuItem(_('Pressure: {0} {1}').format(self.data['pressure'], 
        self.data['units']['pressure']))
      pressure_item.show()
      self.menu.append(pressure_item)

      update_item = Gtk.MenuItem(_('Last update: {}').format(self.last_update))
      update_item.show()
      self.menu.append(update_item)

    self.separator_item = Gtk.MenuItem()
    self.separator_item.show()
    self.menu.append(self.separator_item)

    self.quit_item = Gtk.MenuItem(_('Quit'))
    self.quit_item.connect("activate", self.quit)
    self.quit_item.show()
    self.menu.append(self.quit_item)

    self.ind.set_menu(self.menu)

  def main(self):
    self.check_weather()
    Gtk.main()

  def quit(self, widget):
    sys.exit(0)

  def check_weather(self):
    try:
      self.data = weather_for_woeid(self.woeid, self.format)
      self.ind.set_icon(code2store[int(self.data['code'])])
      self.ind.set_label(u' {0}\xB0'.format(self.data['current_temp']), 'Current conditions')
      self.last_update = datetime.datetime.now().strftime('%X')
      self.menu_setup()
      self.fails = 0
    except urllib2.URLError as e:
      self.fails = self.fails + 1
      syslog.syslog(syslog.LOG_ERR, "Can't retrieve data: {}".format(e.reason))
    except xml.parsers.expat.ExpatError as e:
      self.fails = self.fails + 1
      syslog.syslog(syslog.LOG_ERR, "Weather server returns invalid response: {!s}".format(e))

    if self.fails > FAIL_LIMIT:
        self.ind.set_status(appindicator.IndicatorStatus.ATTENTION)

    GObject.timeout_add(self.period, self.check_weather)


def valid_periodicity(string):
  try:
    value = int(string)
    if value < 60 or value > 18000:
      raise argparse.ArgumentTypeError('invalid choice: {0!r} (choose from 60 to 18000)'.format(string))
  except ValueError:
    msg = 'invalid int value: {0!r}'.format(string)
    raise argparse.ArgumentTypeError(msg)
  return value

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='simple ubuntu weather indicator')
  parser.add_argument('-w','--woeid', type=int, help='where on earth identifier', default=1997422)
  # parser.add_argument('woeid', type=int, help='where on earth identifier')
  parser.add_argument('-f', '--format', choices=['f', 'c'], default='c',
                      help='units for temperature (f: Fahrenheit; c: Celsius)')
  parser.add_argument('-p', '--period', type=valid_periodicity, 
                      default=60*5, help='update periodicity in seconds')
  args = parser.parse_args()

  indicator = WeatherIndicator(args.woeid, args.format, args.period)
  indicator.main()
